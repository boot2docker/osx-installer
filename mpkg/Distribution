<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<installer-gui-script minSpecVersion="1">
    <title>docker_title</title>
    <options customize="allow" allow-external-scripts="yes" rootVolumeOnly="true" hostArchitectures="i386"/>
    <domains enable_anywhere="false" enable_currentUserHome="false" enable_localSystem="true"/>
    <background file="boot2docker.png" alignment="bottomleft" scaling="none"/>
    <welcome file="Welcome.html" mime-type="text/html"/>
    <conclusion file="Installed.html" mime-type="text/html"/>
    <choices-outline>
        <line choice="choiceDockerCLI"/>
        <line choice="choiceBoot2DockerCLI"/>
        <line choice="choiceBoot2DockerISO"/>
        <line choice="choiceBoot2DockerAPP"/>
        <line choice="choiceBoot2DockerUTILS"/>

        <line choice="choiceVBoxKEXTs"/>
        <line choice="choiceVBox"/>
        <line choice="choiceVBoxCLI"/>
    </choices-outline>
    <choice id="choiceDockerCLI" title="choiceDockerCLI_title" description="choiceDockerCLI_msg" start_selected="true" start_enabled="false" start_visible="true">
        <pkg-ref id="io.docker.pkg.docker"/>
    </choice>
    <choice id="choiceBoot2DockerCLI" title="choiceBoot2DockerCLI_title" description="choiceBoot2DockerCLI_msg" start_selected="true" start_enabled="false" start_visible="true">
        <pkg-ref id="io.boot2docker.pkg.boot2docker"/>
    </choice>
    <choice id="choiceBoot2DockerISO" title="choiceBoot2DockerISO_title" description="choiceBoot2DockerISO_msg" start_selected="true" start_enabled="false" start_visible="true">
        <pkg-ref id="io.boot2dockeriso.pkg.boot2dockeriso"/>
    </choice>
    <choice id="choiceBoot2DockerAPP" title="choiceBoot2DockerAPP_title" description="choiceBoot2DockerAPP_msg" start_selected="true" start_enabled="false" start_visible="true">
        <pkg-ref id="io.boot2docker.pkg.boot2dockerapp"/>
    </choice>
    <choice id="choiceBoot2DockerUTILS" title="choiceBoot2DockerUTILS_title" description="choiceBoot2DockerUTILS_msg" start_selected="true" start_enabled="false" start_visible="true">
        <pkg-ref id="io.boot2dockerutils.pkg.boot2dockerutils"/>
    </choice>
    
    <pkg-ref id="io.docker.pkg.docker" auth="Root" version="%DOCKER_VERSION%" installKBytes="%DOCKER_INSTALL_KBYTES%">#docker.pkg</pkg-ref>
    <pkg-ref id="io.docker.pkg.docker">
        <bundle-version/>
    </pkg-ref>
    <pkg-ref id="io.boot2docker.pkg.boot2docker" auth="Root" version="%BOOT2DOCKER_VERSION%" installKBytes="%BOOT2DOCKER_INSTALL_KBYTES%">#boot2docker.pkg</pkg-ref>
    <pkg-ref id="io.boot2docker.pkg.boot2docker">
        <bundle-version/>
    </pkg-ref>

    <pkg-ref id="io.boot2dockerutils.pkg.boot2dockerutils" auth="Root" version="%BOOT2DOCKER_VERSION%" installKBytes="%BOOT2DOCKER_INSTALL_KBYTES%">#boot2dockerutils.pkg</pkg-ref>
    <pkg-ref id="io.boot2dockerutils.pkg.boot2dockerutils">
        <bundle-version/>
    </pkg-ref>

    <pkg-ref id="io.boot2dockeriso.pkg.boot2dockeriso" auth="Root" version="%BOOT2DOCKER_ISO_VERSION%" installKBytes="%BOOT2DOCKER_ISO_INSTALL_KBYTES%">#boot2dockeriso.pkg</pkg-ref>
    <pkg-ref id="io.boot2dockeriso.pkg.boot2dockeriso">
        <bundle-version/>
    </pkg-ref>
    <pkg-ref id="io.boot2docker.pkg.boot2dockerapp" auth="Root" version="%BOOT2DOCKERAPP_VERSION%" installKBytes="%BOOT2DOCKERAPP_INSTALL_KBYTES%">#boot2dockerapp.pkg</pkg-ref>
    <pkg-ref id="io.boot2docker.pkg.boot2dockerapp">
        <bundle-version/>
    </pkg-ref>
    <product id="io.docker.mpkg.docker" version="%INSTALLER_VERSION%"/>

    <!-- Manually imported VBox Stuff -->
    <installation-check script="checkPrerequisite()"/>
    <script>
    /* js:pkmk:start */
    function checkPrerequisite()
    {
       try
       {
           test = system.sysctl('hw.machine');
           system.log("Hardware architecture detected: " + test);
           result = (test == 'i386' || test == 'x86_64');
       } catch (e) { system.log(e); result = false; }

       if (!result)
       {
           my.result.type = 'Fatal';
           my.result.title = system.localizedString('UNSUPPORTED_HW_MACHINE_TLE');
           my.result.message = system.localizedString('UNSUPPORTED_HW_MACHINE_MSG');
           return result;
       }

       try
       {
           test = system.version['ProductVersion'];
           system.log("OS version detected: " + test);
           result = (system.compareVersions(test, '10.6') >= 0);
       } catch (e) { system.log(e); result = false; }

       if (!result)
       {
           my.result.type = 'Fatal';
           my.result.title = system.localizedString('UNSUPPORTED_OS_TLE');
           my.result.message = system.localizedString('UNSUPPORTED_OS_MSG');
           return result;
       }

       try
       {
           /* Embedded scripts are not available here. So, just do a command
              line checking for running VMs instead. */
           rcScript = system.run('/bin/sh', '-c', '/bin/ps -e | /usr/bin/grep -E "VirtualBox.*startvm|VBoxNetDHCP|VBoxNetNAT|VBoxHeadless|VBoxSVC" | /usr/bin/grep -qv grep');
           result = (rcScript != 0);
           system.log("system.run /bin/sh .. returned: " + rcScript + " result=" + result);
       } catch (e) { system.log(e); result = false; }

       if (!result)
       {
           my.result.type = 'Fatal';
           my.result.title = system.localizedString('RUNNING_VMS_TLE');
           my.result.message = system.localizedString('RUNNING_VMS_MSG');
           return result;
       }

       system.log("result:" + result);
       return result;
    }
    /* js:pkmk:end */
    </script>
    <choice id="choiceVBoxKEXTs" title="choiceVBoxKEXTs_title" description="choiceVBoxKEXTs_msg" start_selected="true" start_enabled="true" start_visible="true">
        <pkg-ref id="org.virtualbox.pkg.vboxkexts"/>
    </choice>
    <choice id="choiceVBox" title="choiceVBox_title" description="choiceVBox_msg" start_selected="true" start_enabled="true" start_visible="true">
        <pkg-ref id="org.virtualbox.pkg.virtualbox"/>
    </choice>
    <choice id="choiceVBoxCLI" title="choiceVBoxCLI_title" description="choiceVBoxCLI_msg" start_selected="true" start_enabled="true" start_visible="true">
        <pkg-ref id="org.virtualbox.pkg.virtualboxcli"/>
    </choice>
    <pkg-ref id="org.virtualbox.pkg.vboxkexts" auth="Root" version="%VBOX_VERSION%" installKBytes="935">#VBoxKEXTs.pkg</pkg-ref>
    <pkg-ref id="org.virtualbox.pkg.virtualbox" auth="Root" version="%VBOX_VERSION%" installKBytes="247220">#VirtualBox.pkg</pkg-ref>
    <pkg-ref id="org.virtualbox.pkg.virtualboxcli" auth="Root" version="%VBOX_VERSION%" installKBytes="4">#VirtualBoxCLI.pkg</pkg-ref>
    <pkg-ref id="org.virtualbox.pkg.vboxkexts">
        <bundle-version>
            <bundle CFBundleShortVersionString="%VBOX_VERSION%" CFBundleVersion="%VBOX_VERSION%" id="org.virtualbox.kext.VBoxNetAdp" path="VBoxNetAdp.kext"/>
            <bundle CFBundleShortVersionString="%VBOX_VERSION%" CFBundleVersion="%VBOX_VERSION%" id="org.virtualbox.kext.VBoxDrv" path="VBoxDrv.kext"/>
            <bundle CFBundleShortVersionString="%VBOX_VERSION%" CFBundleVersion="%VBOX_VERSION%" id="org.virtualbox.kext.VBoxNetFlt" path="VBoxNetFlt.kext"/>
            <bundle CFBundleShortVersionString="%VBOX_VERSION%" CFBundleVersion="%VBOX_VERSION%" id="org.virtualbox.kext.VBoxUSB" path="VBoxUSB.kext"/>
        </bundle-version>
    </pkg-ref>
    <pkg-ref id="org.virtualbox.pkg.virtualbox">
        <bundle-version>
            <bundle CFBundleShortVersionString="%VBOX_VERSION%" CFBundleVersion="%VBOX_VERSION%" id="org.virtualbox.app.VirtualBox" path="VirtualBox.app"/>
        </bundle-version>
    </pkg-ref>
    <pkg-ref id="org.virtualbox.pkg.virtualboxcli">
        <bundle-version/>
    </pkg-ref>
</installer-gui-script>
